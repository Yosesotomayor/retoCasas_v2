{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/albertovelazquez/Documents/Github/retoCasas_v2/app/src/lib/auth.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport bcrypt from \"bcryptjs\";\n\n// Simulador de base de datos - en producción usar una DB real\nconst users: { id: string; email: string; password: string; name: string }[] = [];\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = users.find(u => u.email === credentials.email);\n        \n        if (!user) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\n        \n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        };\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    })\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/login\",\n    signUp: \"/signup\",\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n};\n\n// Helper para registro\nexport async function registerUser(email: string, password: string, name: string) {\n  const existingUser = users.find(u => u.email === email);\n  if (existingUser) {\n    throw new Error(\"El usuario ya existe\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 12);\n  const newUser = {\n    id: Math.random().toString(36).substring(2),\n    email,\n    password: hashedPassword,\n    name,\n  };\n  \n  users.push(newUser);\n  return { id: newUser.id, email: newUser.email, name: newUser.name };\n}\n\nexport default NextAuth(authOptions);"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,8DAA8D;AAC9D,MAAM,QAAyE,EAAE;AAE1E,MAAM,cAA2B;IACtC,WAAW;QACT,IAAA,qKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,YAAY,KAAK;gBAE1D,IAAI,CAAC,MAAM;oBACT,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,8IAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBAEhF,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;QACA,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;QACR,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF;AAGO,eAAe,aAAa,KAAa,EAAE,QAAgB,EAAE,IAAY;IAC9E,MAAM,eAAe,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK;IACjD,IAAI,cAAc;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,iBAAiB,MAAM,8IAAM,CAAC,IAAI,CAAC,UAAU;IACnD,MAAM,UAAU;QACd,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC;QACzC;QACA,UAAU;QACV;IACF;IAEA,MAAM,IAAI,CAAC;IACX,OAAO;QAAE,IAAI,QAAQ,EAAE;QAAE,OAAO,QAAQ,KAAK;QAAE,MAAM,QAAQ,IAAI;IAAC;AACpE;uCAEe,IAAA,kJAAQ,EAAC","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///Users/albertovelazquez/Documents/Github/retoCasas_v2/app/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { registerUser } from \"@/lib/auth\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password, name } = await request.json();\n\n    if (!email || !password || !name) {\n      return NextResponse.json(\n        { error: \"Todos los campos son requeridos\" },\n        { status: 400 }\n      );\n    }\n\n    if (password.length < 8 || !/[A-Z]/.test(password) || !/[0-9]/.test(password)) {\n      return NextResponse.json(\n        { error: \"La contraseña debe tener mínimo 8 caracteres, una mayúscula y un número\" },\n        { status: 400 }\n      );\n    }\n\n    const user = await registerUser(email, password, name);\n    \n    return NextResponse.json(\n      { message: \"Usuario registrado exitosamente\", user: { id: user.id, email: user.email, name: user.name } },\n      { status: 201 }\n    );\n  } catch (error: unknown) {\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error interno del servidor\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM;YAChC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,SAAS,MAAM,GAAG,KAAK,CAAC,QAAQ,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,CAAC,WAAW;YAC7E,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0E,GACnF;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,IAAA,oIAAY,EAAC,OAAO,UAAU;QAEjD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAmC,MAAM;gBAAE,IAAI,KAAK,EAAE;gBAAE,OAAO,KAAK,KAAK;gBAAE,MAAM,KAAK,IAAI;YAAC;QAAE,GACxG;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAgB;QACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAA6B,GAC/E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}