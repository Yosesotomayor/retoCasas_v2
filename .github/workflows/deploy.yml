name: CI/CD - Docker Hub â†’ ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER: retoCasas_v2
  SERVICE: retoCasas_v2-service-xlrxv89g
  IMAGE_NAME: yosesotomayor/retocasas_v2

permissions:
  id-token: write    # para OIDC con AWS (sin keys)
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ----- Build & Push a Docker Hub -----
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags
        id: vars
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "date_tag=$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./server/Dockerfile.dev    # usamos el Dockerfile ubicado en /server
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.date_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ----- Despliegue a ECS -----
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}   # arn:aws:iam::<acct>:role/<rol-para-gh>
          aws-region: ${{ env.AWS_REGION }}

      - name: Force new deployment (service points to :latest)
        run: |
          aws ecs update-service \
            --cluster "${{ env.CLUSTER }}" \
            --service "${{ env.SERVICE }}" \
            --force-new-deployment

      - name: Wait for deployment to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.CLUSTER }}" \
            --services "${{ env.SERVICE }}" 